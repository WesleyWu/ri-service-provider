// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: video_collection.proto

package model

import (
	gmeta "github.com/WesleyWu/ri-service-provider/gowing/gmeta"
	_ "github.com/WesleyWu/ri-service-provider/gowing/gwtypes"
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoCollectionCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *anypb.Any `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *anypb.Any `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType *anypb.Any `protobuf:"bytes,3,opt,name=contentType,proto3" json:"contentType,omitempty"`
	FilterType  *anypb.Any `protobuf:"bytes,4,opt,name=filterType,proto3" json:"filterType,omitempty"`
	Count       *anypb.Any `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline    *anypb.Any `protobuf:"bytes,6,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	CreatedAt   *anypb.Any `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *anypb.Any `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *VideoCollectionCountReq) Reset() {
	*x = VideoCollectionCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionCountReq) ProtoMessage() {}

func (x *VideoCollectionCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionCountReq.ProtoReflect.Descriptor instead.
func (*VideoCollectionCountReq) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{0}
}

func (x *VideoCollectionCountReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VideoCollectionCountReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VideoCollectionCountReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *VideoCollectionCountReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *VideoCollectionCountReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *VideoCollectionCountReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *VideoCollectionCountReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionCountReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VideoCollectionCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total *int32 `protobuf:"varint,1,opt,name=total,proto3,oneof" json:"total"`
}

func (x *VideoCollectionCountRes) Reset() {
	*x = VideoCollectionCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionCountRes) ProtoMessage() {}

func (x *VideoCollectionCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionCountRes.ProtoReflect.Descriptor instead.
func (*VideoCollectionCountRes) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{1}
}

func (x *VideoCollectionCountRes) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type VideoCollectionOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *anypb.Any `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *anypb.Any `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType *anypb.Any `protobuf:"bytes,3,opt,name=contentType,proto3" json:"contentType,omitempty"`
	FilterType  *anypb.Any `protobuf:"bytes,4,opt,name=filterType,proto3" json:"filterType,omitempty"`
	Count       *anypb.Any `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline    *anypb.Any `protobuf:"bytes,6,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	CreatedAt   *anypb.Any `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *anypb.Any `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OrderBy     string     `protobuf:"bytes,9,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
}

func (x *VideoCollectionOneReq) Reset() {
	*x = VideoCollectionOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionOneReq) ProtoMessage() {}

func (x *VideoCollectionOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionOneReq.ProtoReflect.Descriptor instead.
func (*VideoCollectionOneReq) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{2}
}

func (x *VideoCollectionOneReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VideoCollectionOneReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VideoCollectionOneReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *VideoCollectionOneReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *VideoCollectionOneReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *VideoCollectionOneReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *VideoCollectionOneReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionOneReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VideoCollectionOneReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type VideoCollectionOneRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id"`
	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name"`
	ContentType *int32                 `protobuf:"varint,3,opt,name=contentType,proto3,oneof" json:"contentType"`
	FilterType  *int32                 `protobuf:"varint,4,opt,name=filterType,proto3,oneof" json:"filterType"`
	Count       *uint32                `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count"`
	IsOnline    *bool                  `protobuf:"varint,6,opt,name=isOnline,proto3,oneof" json:"isOnline"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3,oneof" json:"createdAt"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3,oneof" json:"updatedAt"`
}

func (x *VideoCollectionOneRes) Reset() {
	*x = VideoCollectionOneRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionOneRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionOneRes) ProtoMessage() {}

func (x *VideoCollectionOneRes) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionOneRes.ProtoReflect.Descriptor instead.
func (*VideoCollectionOneRes) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{3}
}

func (x *VideoCollectionOneRes) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VideoCollectionOneRes) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VideoCollectionOneRes) GetContentType() int32 {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return 0
}

func (x *VideoCollectionOneRes) GetFilterType() int32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

func (x *VideoCollectionOneRes) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *VideoCollectionOneRes) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *VideoCollectionOneRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionOneRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VideoCollectionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *anypb.Any `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *anypb.Any `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType *anypb.Any `protobuf:"bytes,3,opt,name=contentType,proto3" json:"contentType,omitempty"`
	FilterType  *anypb.Any `protobuf:"bytes,4,opt,name=filterType,proto3" json:"filterType,omitempty"`
	Count       *anypb.Any `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline    *anypb.Any `protobuf:"bytes,6,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	CreatedAt   *anypb.Any `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *anypb.Any `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Page        uint32     `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty" d:"1"`
	PageSize    uint32     `protobuf:"varint,10,opt,name=pageSize,proto3" json:"pageSize,omitempty" d:"10"`
	OrderBy     string     `protobuf:"bytes,11,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
}

func (x *VideoCollectionListReq) Reset() {
	*x = VideoCollectionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionListReq) ProtoMessage() {}

func (x *VideoCollectionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionListReq.ProtoReflect.Descriptor instead.
func (*VideoCollectionListReq) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{4}
}

func (x *VideoCollectionListReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VideoCollectionListReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VideoCollectionListReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *VideoCollectionListReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *VideoCollectionListReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *VideoCollectionListReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *VideoCollectionListReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionListReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VideoCollectionListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VideoCollectionListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VideoCollectionListReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type VideoCollectionListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   *int32                 `protobuf:"varint,1,opt,name=total,proto3,oneof" json:"total"`
	Current *int32                 `protobuf:"varint,2,opt,name=current,proto3,oneof" json:"current"`
	Items   []*VideoCollectionItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
}

func (x *VideoCollectionListRes) Reset() {
	*x = VideoCollectionListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionListRes) ProtoMessage() {}

func (x *VideoCollectionListRes) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionListRes.ProtoReflect.Descriptor instead.
func (*VideoCollectionListRes) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{5}
}

func (x *VideoCollectionListRes) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *VideoCollectionListRes) GetCurrent() int32 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

func (x *VideoCollectionListRes) GetItems() []*VideoCollectionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type VideoCollectionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id"`
	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name"`
	ContentType *int32                 `protobuf:"varint,3,opt,name=contentType,proto3,oneof" json:"contentType"`
	FilterType  *int32                 `protobuf:"varint,4,opt,name=filterType,proto3,oneof" json:"filterType"`
	Count       *uint32                `protobuf:"varint,5,opt,name=count,proto3,oneof" json:"count"`
	IsOnline    *bool                  `protobuf:"varint,6,opt,name=isOnline,proto3,oneof" json:"isOnline"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3,oneof" json:"createdAt"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3,oneof" json:"updatedAt"`
}

func (x *VideoCollectionItem) Reset() {
	*x = VideoCollectionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionItem) ProtoMessage() {}

func (x *VideoCollectionItem) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionItem.ProtoReflect.Descriptor instead.
func (*VideoCollectionItem) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{6}
}

func (x *VideoCollectionItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VideoCollectionItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VideoCollectionItem) GetContentType() int32 {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return 0
}

func (x *VideoCollectionItem) GetFilterType() int32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

func (x *VideoCollectionItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *VideoCollectionItem) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *VideoCollectionItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VideoCollectionCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta        gmeta.Meta             `protobuf:"varint,1,opt,name=meta,proto3,enum=gowing.protobuf.Meta" json:"-" orm:"do:true"`
	Id          *string                `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id" p:"id" v:"required#视频集ID，字符串格式不能为空"`
	Name        *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name" p:"name" v:"required|max-length:50#视频集名称不能为空|视频集名称不能超过50个字"`
	ContentType *int32                 `protobuf:"varint,4,opt,name=contentType,proto3,oneof" json:"contentType" p:"contentType" v:"required#内容类型不能为空"`
	FilterType  *int32                 `protobuf:"varint,5,opt,name=filterType,proto3,oneof" json:"filterType" p:"filterType"`
	Count       *uint32                `protobuf:"varint,6,opt,name=count,proto3,oneof" json:"count" p:"count"`
	IsOnline    *bool                  `protobuf:"varint,7,opt,name=isOnline,proto3,oneof" json:"isOnline" p:"isOnline"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3,oneof" json:"createdAt" p:"createdAt"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3,oneof" json:"updatedAt" p:"updatedAt"`
}

func (x *VideoCollectionCreateReq) Reset() {
	*x = VideoCollectionCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionCreateReq) ProtoMessage() {}

func (x *VideoCollectionCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionCreateReq.ProtoReflect.Descriptor instead.
func (*VideoCollectionCreateReq) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{7}
}

func (x *VideoCollectionCreateReq) GetMeta() gmeta.Meta {
	if x != nil {
		return x.Meta
	}
	return gmeta.Meta__
}

func (x *VideoCollectionCreateReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VideoCollectionCreateReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VideoCollectionCreateReq) GetContentType() int32 {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return 0
}

func (x *VideoCollectionCreateReq) GetFilterType() int32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

func (x *VideoCollectionCreateReq) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *VideoCollectionCreateReq) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *VideoCollectionCreateReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionCreateReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VideoCollectionCreateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message"`
	LastInsertId *int64  `protobuf:"varint,2,opt,name=lastInsertId,proto3,oneof" json:"lastInsertId"`
	RowsAffected *int64  `protobuf:"varint,3,opt,name=rowsAffected,proto3,oneof" json:"rowsAffected"`
}

func (x *VideoCollectionCreateRes) Reset() {
	*x = VideoCollectionCreateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionCreateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionCreateRes) ProtoMessage() {}

func (x *VideoCollectionCreateRes) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionCreateRes.ProtoReflect.Descriptor instead.
func (*VideoCollectionCreateRes) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{8}
}

func (x *VideoCollectionCreateRes) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *VideoCollectionCreateRes) GetLastInsertId() int64 {
	if x != nil && x.LastInsertId != nil {
		return *x.LastInsertId
	}
	return 0
}

func (x *VideoCollectionCreateRes) GetRowsAffected() int64 {
	if x != nil && x.RowsAffected != nil {
		return *x.RowsAffected
	}
	return 0
}

type VideoCollectionUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta        gmeta.Meta             `protobuf:"varint,1,opt,name=meta,proto3,enum=gowing.protobuf.Meta" json:"-" orm:"do:true"`
	Id          *string                `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id" p:"id" v:"required#视频集ID，字符串格式不能为空"`
	Name        *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name" p:"name"`
	ContentType *int32                 `protobuf:"varint,4,opt,name=contentType,proto3,oneof" json:"contentType" p:"contentType"`
	FilterType  *int32                 `protobuf:"varint,5,opt,name=filterType,proto3,oneof" json:"filterType" p:"filterType"`
	Count       *uint32                `protobuf:"varint,6,opt,name=count,proto3,oneof" json:"count" p:"count"`
	IsOnline    *bool                  `protobuf:"varint,7,opt,name=isOnline,proto3,oneof" json:"isOnline" p:"isOnline"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3,oneof" json:"createdAt" p:"createdAt"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3,oneof" json:"updatedAt" p:"updatedAt"`
}

func (x *VideoCollectionUpdateReq) Reset() {
	*x = VideoCollectionUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionUpdateReq) ProtoMessage() {}

func (x *VideoCollectionUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionUpdateReq.ProtoReflect.Descriptor instead.
func (*VideoCollectionUpdateReq) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{9}
}

func (x *VideoCollectionUpdateReq) GetMeta() gmeta.Meta {
	if x != nil {
		return x.Meta
	}
	return gmeta.Meta__
}

func (x *VideoCollectionUpdateReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VideoCollectionUpdateReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VideoCollectionUpdateReq) GetContentType() int32 {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return 0
}

func (x *VideoCollectionUpdateReq) GetFilterType() int32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

func (x *VideoCollectionUpdateReq) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *VideoCollectionUpdateReq) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *VideoCollectionUpdateReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionUpdateReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VideoCollectionUpdateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message"`
	RowsAffected *int64  `protobuf:"varint,2,opt,name=rowsAffected,proto3,oneof" json:"rowsAffected"`
}

func (x *VideoCollectionUpdateRes) Reset() {
	*x = VideoCollectionUpdateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionUpdateRes) ProtoMessage() {}

func (x *VideoCollectionUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionUpdateRes.ProtoReflect.Descriptor instead.
func (*VideoCollectionUpdateRes) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{10}
}

func (x *VideoCollectionUpdateRes) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *VideoCollectionUpdateRes) GetRowsAffected() int64 {
	if x != nil && x.RowsAffected != nil {
		return *x.RowsAffected
	}
	return 0
}

type VideoCollectionUpsertReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta        gmeta.Meta             `protobuf:"varint,1,opt,name=meta,proto3,enum=gowing.protobuf.Meta" json:"-" orm:"do:true"`
	Id          *string                `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id" p:"id" v:"required#视频集ID，字符串格式不能为空"`
	Name        *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name" p:"name"`
	ContentType *int32                 `protobuf:"varint,4,opt,name=contentType,proto3,oneof" json:"contentType" p:"contentType"`
	FilterType  *int32                 `protobuf:"varint,5,opt,name=filterType,proto3,oneof" json:"filterType" p:"filterType"`
	Count       *uint32                `protobuf:"varint,6,opt,name=count,proto3,oneof" json:"count" p:"count"`
	IsOnline    *bool                  `protobuf:"varint,7,opt,name=isOnline,proto3,oneof" json:"isOnline" p:"isOnline"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3,oneof" json:"createdAt" p:"createdAt"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3,oneof" json:"updatedAt" p:"updatedAt"`
}

func (x *VideoCollectionUpsertReq) Reset() {
	*x = VideoCollectionUpsertReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionUpsertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionUpsertReq) ProtoMessage() {}

func (x *VideoCollectionUpsertReq) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionUpsertReq.ProtoReflect.Descriptor instead.
func (*VideoCollectionUpsertReq) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{11}
}

func (x *VideoCollectionUpsertReq) GetMeta() gmeta.Meta {
	if x != nil {
		return x.Meta
	}
	return gmeta.Meta__
}

func (x *VideoCollectionUpsertReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VideoCollectionUpsertReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VideoCollectionUpsertReq) GetContentType() int32 {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return 0
}

func (x *VideoCollectionUpsertReq) GetFilterType() int32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

func (x *VideoCollectionUpsertReq) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *VideoCollectionUpsertReq) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

func (x *VideoCollectionUpsertReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionUpsertReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VideoCollectionUpsertRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message"`
	LastInsertId *int64  `protobuf:"varint,2,opt,name=lastInsertId,proto3,oneof" json:"lastInsertId"`
	RowsAffected *int64  `protobuf:"varint,3,opt,name=rowsAffected,proto3,oneof" json:"rowsAffected"`
}

func (x *VideoCollectionUpsertRes) Reset() {
	*x = VideoCollectionUpsertRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionUpsertRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionUpsertRes) ProtoMessage() {}

func (x *VideoCollectionUpsertRes) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionUpsertRes.ProtoReflect.Descriptor instead.
func (*VideoCollectionUpsertRes) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{12}
}

func (x *VideoCollectionUpsertRes) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *VideoCollectionUpsertRes) GetLastInsertId() int64 {
	if x != nil && x.LastInsertId != nil {
		return *x.LastInsertId
	}
	return 0
}

func (x *VideoCollectionUpsertRes) GetRowsAffected() int64 {
	if x != nil && x.RowsAffected != nil {
		return *x.RowsAffected
	}
	return 0
}

type VideoCollectionDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *anypb.Any `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *anypb.Any `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContentType *anypb.Any `protobuf:"bytes,3,opt,name=contentType,proto3" json:"contentType,omitempty"`
	FilterType  *anypb.Any `protobuf:"bytes,4,opt,name=filterType,proto3" json:"filterType,omitempty"`
	Count       *anypb.Any `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	IsOnline    *anypb.Any `protobuf:"bytes,6,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	CreatedAt   *anypb.Any `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *anypb.Any `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *VideoCollectionDeleteReq) Reset() {
	*x = VideoCollectionDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionDeleteReq) ProtoMessage() {}

func (x *VideoCollectionDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionDeleteReq.ProtoReflect.Descriptor instead.
func (*VideoCollectionDeleteReq) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{13}
}

func (x *VideoCollectionDeleteReq) GetId() *anypb.Any {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VideoCollectionDeleteReq) GetName() *anypb.Any {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VideoCollectionDeleteReq) GetContentType() *anypb.Any {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *VideoCollectionDeleteReq) GetFilterType() *anypb.Any {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *VideoCollectionDeleteReq) GetCount() *anypb.Any {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *VideoCollectionDeleteReq) GetIsOnline() *anypb.Any {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *VideoCollectionDeleteReq) GetCreatedAt() *anypb.Any {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoCollectionDeleteReq) GetUpdatedAt() *anypb.Any {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VideoCollectionDeleteRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message"`
	LastInsertId *int64  `protobuf:"varint,2,opt,name=lastInsertId,proto3,oneof" json:"lastInsertId"`
	RowsAffected *int64  `protobuf:"varint,3,opt,name=rowsAffected,proto3,oneof" json:"rowsAffected"`
}

func (x *VideoCollectionDeleteRes) Reset() {
	*x = VideoCollectionDeleteRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_collection_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCollectionDeleteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCollectionDeleteRes) ProtoMessage() {}

func (x *VideoCollectionDeleteRes) ProtoReflect() protoreflect.Message {
	mi := &file_video_collection_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCollectionDeleteRes.ProtoReflect.Descriptor instead.
func (*VideoCollectionDeleteRes) Descriptor() ([]byte, []int) {
	return file_video_collection_proto_rawDescGZIP(), []int{14}
}

func (x *VideoCollectionDeleteRes) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *VideoCollectionDeleteRes) GetLastInsertId() int64 {
	if x != nil && x.LastInsertId != nil {
		return *x.LastInsertId
	}
	return 0
}

func (x *VideoCollectionDeleteRes) GetRowsAffected() int64 {
	if x != nil && x.RowsAffected != nil {
		return *x.RowsAffected
	}
	return 0
}

var File_video_collection_proto protoreflect.FileDescriptor

var file_video_collection_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x67, 0x6f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x03, 0x0a, 0x17, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x69,
	0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x51, 0x0a, 0x17, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb5, 0x03, 0x0a, 0x15, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x22, 0xd7, 0x04, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a,
	0x84, 0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x17, 0x9a, 0x84, 0x9e, 0x03, 0x12, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16,
	0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x48, 0x05, 0x52,
	0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x9a, 0x84, 0x9e,
	0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x48, 0x07, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xff, 0x03, 0x0a, 0x16, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0x9a, 0x84, 0x9e, 0x03, 0x05, 0x64, 0x3a,
	0x22, 0x31, 0x22, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0x9a, 0x84, 0x9e,
	0x03, 0x06, 0x64, 0x3a, 0x22, 0x31, 0x30, 0x22, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xcf, 0x01, 0x0a,
	0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x48, 0x01, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x11,
	0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xd5,
	0x04, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69,
	0x64, 0x22, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x9a, 0x84, 0x9e,
	0x03, 0x12, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03,
	0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x48, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x48, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x48, 0x06,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x54,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x9a,
	0x84, 0x9e, 0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x48, 0x07, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbd, 0x07, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x64, 0x6f, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x9a, 0x84, 0x9e, 0x03, 0x47, 0x70, 0x3a,
	0x22, 0x69, 0x64, 0x22, 0x20, 0x76, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x23, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe9, 0x9b, 0x86, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x69, 0x64, 0x22, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x8d,
	0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x74, 0x9a,
	0x84, 0x9e, 0x03, 0x6f, 0x70, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x76, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x7c, 0x6d, 0x61, 0x78, 0x2d, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x3a, 0x35, 0x30, 0x23, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe9, 0x9b, 0x86,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x7c, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x35, 0x30,
	0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x74,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x4d, 0x9a, 0x84, 0x9e, 0x03, 0x48, 0x70, 0x3a, 0x22, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x76, 0x3a, 0x22, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x23, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x9a, 0x84, 0x9e, 0x03, 0x20, 0x70,
	0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x70, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x04, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0x9a, 0x84, 0x9e, 0x03,
	0x1c, 0x70, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x48, 0x05, 0x52,
	0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x23, 0x9a, 0x84, 0x9e,
	0x03, 0x1e, 0x70, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x62, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x70, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x48, 0x07, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x9a,
	0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x6f,
	0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x6f, 0x77,
	0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x6f,
	0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xbb, 0x06, 0x0a, 0x18,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1b, 0x9a,
	0x84, 0x9e, 0x03, 0x16, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x6f, 0x3a, 0x74, 0x72, 0x75, 0x65,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x61, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x9a, 0x84,
	0x9e, 0x03, 0x47, 0x70, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x20, 0x76, 0x3a, 0x22, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x23, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe9, 0x9b, 0x86, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x70, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0x9a, 0x84,
	0x9e, 0x03, 0x22, 0x70, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x9a, 0x84, 0x9e,
	0x03, 0x20, 0x70, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x48, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x70, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x69,
	0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0x9a,
	0x84, 0x9e, 0x03, 0x1c, 0x70, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x48, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x62, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x23,
	0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x70, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x70, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x48, 0x07, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x6f,
	0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x6f, 0x77,
	0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x6f,
	0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xbb, 0x06, 0x0a, 0x18, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1b, 0x9a, 0x84,
	0x9e, 0x03, 0x16, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x6f, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x61, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x9a, 0x84, 0x9e,
	0x03, 0x47, 0x70, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x20, 0x76, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x23, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0xe9, 0x9b, 0x86, 0x49, 0x44,
	0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0xa0, 0xbc, 0xe5,
	0xbc, 0x8f, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x70, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0x9a, 0x84, 0x9e,
	0x03, 0x22, 0x70, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x9a, 0x84, 0x9e, 0x03,
	0x20, 0x70, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x48, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x70, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x04,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0x9a, 0x84,
	0x9e, 0x03, 0x1c, 0x70, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x48,
	0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x23, 0x9a,
	0x84, 0x9e, 0x03, 0x1e, 0x70, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x62, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x70, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x48, 0x07, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c,
	0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72,
	0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x48, 0x02, 0x52, 0x0c,
	0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x9e, 0x03,
	0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82,
	0x02, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84,
	0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x48,
	0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x32, 0xcd, 0x03, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x12, 0x16, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x19, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x42, 0x32, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x1a, 0x61, 0x70, 0x70,
	0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_collection_proto_rawDescOnce sync.Once
	file_video_collection_proto_rawDescData = file_video_collection_proto_rawDesc
)

func file_video_collection_proto_rawDescGZIP() []byte {
	file_video_collection_proto_rawDescOnce.Do(func() {
		file_video_collection_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_collection_proto_rawDescData)
	})
	return file_video_collection_proto_rawDescData
}

var file_video_collection_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_video_collection_proto_goTypes = []interface{}{
	(*VideoCollectionCountReq)(nil),  // 0: VideoCollectionCountReq
	(*VideoCollectionCountRes)(nil),  // 1: VideoCollectionCountRes
	(*VideoCollectionOneReq)(nil),    // 2: VideoCollectionOneReq
	(*VideoCollectionOneRes)(nil),    // 3: VideoCollectionOneRes
	(*VideoCollectionListReq)(nil),   // 4: VideoCollectionListReq
	(*VideoCollectionListRes)(nil),   // 5: VideoCollectionListRes
	(*VideoCollectionItem)(nil),      // 6: VideoCollectionItem
	(*VideoCollectionCreateReq)(nil), // 7: VideoCollectionCreateReq
	(*VideoCollectionCreateRes)(nil), // 8: VideoCollectionCreateRes
	(*VideoCollectionUpdateReq)(nil), // 9: VideoCollectionUpdateReq
	(*VideoCollectionUpdateRes)(nil), // 10: VideoCollectionUpdateRes
	(*VideoCollectionUpsertReq)(nil), // 11: VideoCollectionUpsertReq
	(*VideoCollectionUpsertRes)(nil), // 12: VideoCollectionUpsertRes
	(*VideoCollectionDeleteReq)(nil), // 13: VideoCollectionDeleteReq
	(*VideoCollectionDeleteRes)(nil), // 14: VideoCollectionDeleteRes
	(*anypb.Any)(nil),                // 15: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),    // 16: google.protobuf.Timestamp
	(gmeta.Meta)(0),                  // 17: gowing.protobuf.Meta
}
var file_video_collection_proto_depIdxs = []int32{
	15, // 0: VideoCollectionCountReq.id:type_name -> google.protobuf.Any
	15, // 1: VideoCollectionCountReq.name:type_name -> google.protobuf.Any
	15, // 2: VideoCollectionCountReq.contentType:type_name -> google.protobuf.Any
	15, // 3: VideoCollectionCountReq.filterType:type_name -> google.protobuf.Any
	15, // 4: VideoCollectionCountReq.count:type_name -> google.protobuf.Any
	15, // 5: VideoCollectionCountReq.isOnline:type_name -> google.protobuf.Any
	15, // 6: VideoCollectionCountReq.createdAt:type_name -> google.protobuf.Any
	15, // 7: VideoCollectionCountReq.updatedAt:type_name -> google.protobuf.Any
	15, // 8: VideoCollectionOneReq.id:type_name -> google.protobuf.Any
	15, // 9: VideoCollectionOneReq.name:type_name -> google.protobuf.Any
	15, // 10: VideoCollectionOneReq.contentType:type_name -> google.protobuf.Any
	15, // 11: VideoCollectionOneReq.filterType:type_name -> google.protobuf.Any
	15, // 12: VideoCollectionOneReq.count:type_name -> google.protobuf.Any
	15, // 13: VideoCollectionOneReq.isOnline:type_name -> google.protobuf.Any
	15, // 14: VideoCollectionOneReq.createdAt:type_name -> google.protobuf.Any
	15, // 15: VideoCollectionOneReq.updatedAt:type_name -> google.protobuf.Any
	16, // 16: VideoCollectionOneRes.createdAt:type_name -> google.protobuf.Timestamp
	16, // 17: VideoCollectionOneRes.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 18: VideoCollectionListReq.id:type_name -> google.protobuf.Any
	15, // 19: VideoCollectionListReq.name:type_name -> google.protobuf.Any
	15, // 20: VideoCollectionListReq.contentType:type_name -> google.protobuf.Any
	15, // 21: VideoCollectionListReq.filterType:type_name -> google.protobuf.Any
	15, // 22: VideoCollectionListReq.count:type_name -> google.protobuf.Any
	15, // 23: VideoCollectionListReq.isOnline:type_name -> google.protobuf.Any
	15, // 24: VideoCollectionListReq.createdAt:type_name -> google.protobuf.Any
	15, // 25: VideoCollectionListReq.updatedAt:type_name -> google.protobuf.Any
	6,  // 26: VideoCollectionListRes.items:type_name -> VideoCollectionItem
	16, // 27: VideoCollectionItem.createdAt:type_name -> google.protobuf.Timestamp
	16, // 28: VideoCollectionItem.updatedAt:type_name -> google.protobuf.Timestamp
	17, // 29: VideoCollectionCreateReq.meta:type_name -> gowing.protobuf.Meta
	16, // 30: VideoCollectionCreateReq.createdAt:type_name -> google.protobuf.Timestamp
	16, // 31: VideoCollectionCreateReq.updatedAt:type_name -> google.protobuf.Timestamp
	17, // 32: VideoCollectionUpdateReq.meta:type_name -> gowing.protobuf.Meta
	16, // 33: VideoCollectionUpdateReq.createdAt:type_name -> google.protobuf.Timestamp
	16, // 34: VideoCollectionUpdateReq.updatedAt:type_name -> google.protobuf.Timestamp
	17, // 35: VideoCollectionUpsertReq.meta:type_name -> gowing.protobuf.Meta
	16, // 36: VideoCollectionUpsertReq.createdAt:type_name -> google.protobuf.Timestamp
	16, // 37: VideoCollectionUpsertReq.updatedAt:type_name -> google.protobuf.Timestamp
	15, // 38: VideoCollectionDeleteReq.id:type_name -> google.protobuf.Any
	15, // 39: VideoCollectionDeleteReq.name:type_name -> google.protobuf.Any
	15, // 40: VideoCollectionDeleteReq.contentType:type_name -> google.protobuf.Any
	15, // 41: VideoCollectionDeleteReq.filterType:type_name -> google.protobuf.Any
	15, // 42: VideoCollectionDeleteReq.count:type_name -> google.protobuf.Any
	15, // 43: VideoCollectionDeleteReq.isOnline:type_name -> google.protobuf.Any
	15, // 44: VideoCollectionDeleteReq.createdAt:type_name -> google.protobuf.Any
	15, // 45: VideoCollectionDeleteReq.updatedAt:type_name -> google.protobuf.Any
	0,  // 46: VideoCollection.Count:input_type -> VideoCollectionCountReq
	2,  // 47: VideoCollection.One:input_type -> VideoCollectionOneReq
	4,  // 48: VideoCollection.List:input_type -> VideoCollectionListReq
	7,  // 49: VideoCollection.Create:input_type -> VideoCollectionCreateReq
	9,  // 50: VideoCollection.Update:input_type -> VideoCollectionUpdateReq
	11, // 51: VideoCollection.Upsert:input_type -> VideoCollectionUpsertReq
	13, // 52: VideoCollection.Delete:input_type -> VideoCollectionDeleteReq
	1,  // 53: VideoCollection.Count:output_type -> VideoCollectionCountRes
	3,  // 54: VideoCollection.One:output_type -> VideoCollectionOneRes
	5,  // 55: VideoCollection.List:output_type -> VideoCollectionListRes
	8,  // 56: VideoCollection.Create:output_type -> VideoCollectionCreateRes
	10, // 57: VideoCollection.Update:output_type -> VideoCollectionUpdateRes
	12, // 58: VideoCollection.Upsert:output_type -> VideoCollectionUpsertRes
	14, // 59: VideoCollection.Delete:output_type -> VideoCollectionDeleteRes
	53, // [53:60] is the sub-list for method output_type
	46, // [46:53] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_video_collection_proto_init() }
func file_video_collection_proto_init() {
	if File_video_collection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_collection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionOneRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionCreateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionUpdateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionUpsertReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionUpsertRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_collection_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCollectionDeleteRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_collection_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_video_collection_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_collection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_video_collection_proto_goTypes,
		DependencyIndexes: file_video_collection_proto_depIdxs,
		MessageInfos:      file_video_collection_proto_msgTypes,
	}.Build()
	File_video_collection_proto = out.File
	file_video_collection_proto_rawDesc = nil
	file_video_collection_proto_goTypes = nil
	file_video_collection_proto_depIdxs = nil
}
